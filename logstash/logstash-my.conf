# Sample Logstash configuration for creating a simple
# Beats -> Logstash -> Elasticsearch pipeline.

input {
  #beats {
  #  type => "beats"
  #  port => 5044
  #  client_inactivity_timeout => 60
  #  include_codec_tag => true
  #}
  jdbc {
    type => "jdbc"
    id => "aaaaabbbbb"
    jdbc_driver_class => "com.mysql.cj.jdbc.Driver"
    jdbc_driver_library => "/data/logstash/mysql-connector-java-8.0.18.jar"
    jdbc_connection_string => "jdbc:mysql://192.168.1.232:3306/skdb?serverTimezone=GMT&useUnicode=true&characterEncoding=utf8"
    jdbc_user => "sky"
    jdbc_password => "Sky@123456"
    statement => "select * from t3 where update_time > :sql_last_value and update_time < now()"

    record_last_run => true
    clean_run => false
    last_run_metadata_path => "/data/logstash/last_run"
    use_column_value => true
    tracking_column => "update_time"
    tracking_column_type => "timestamp"
    schedule => "* * * * *"
  }
  #redis {
  #  type => "redis_list"
  #  host => "192.168.1.232"
  #  port => 6379
  #  ssl => false
  #  password => "b840fc02d524045429941cc15f5ae41cb7be6c52"
  #  db => 1    
  #  data_type => "list"
  #  key => "dream"
  #  threads => 1
  #  timeout => 5
  #}
  #redis {
  #  type => "redis_channel"
  #  host => "192.168.1.232"
  #  port => 6379
  #  ssl => false
  #  password => "b840fc02d524045429941cc15f5ae41cb7be6c52"
  #  db => 1    
  #  data_type => "channel"
  #  key => "chann"
  #  threads => 1
  #  timeout => 5
  #}
}

filter {
#  grok {
#    #match => { "message" => "%{COMBINEDAPACHELOG}"}
#    match => { "message" => '%{IPORHOST:client_ip} %{HTTPDUSER:ident} %{HTTPDUSER:auth} \[%{HTTPDATE:timestamp}\] "(?:%{WORD:verb} %{NOTSPACE:request}(?: HTTP/%{NUMBER:httpversion})?|%{DATA:rawrequest})" %{NUMBER:response} %{NUMBER:bytes}'
#    }
#  }
  if [type] == "beats"{
    grok {
      match => {
        "message" => "%{WORD:message} %{NUMBER:m2}"
      }
      #overwrite => ["message"]
      overwrite => [ "message" ]
    }
    mutate {
      remove_field => ["@version", "@timestamp", "update_time", "agent", "host"]
    }
  }
  
  if [type]=="jdbc"{
    mutate {
      remove_field => ["@version", "@timestamp", "update_time"]
    }
  }
  if [type]=="redis_list"{
    mutate {
      remove_field => ["@version", "@timestamp"]
    }
    #json_encode {
    #  source => "message"
    #  target => "hhaa"
    #}
  }
  if [type]=="redis_channel"{
    mutate {
      remove_field => ["@version", "@timestamp"]
    }
    #json_encode {
    #  source => "message"
    #  target => "hhaa"
    #}
  }
}


output {
  #stdout { codec => json }
  stdout { 
    codec => rubydebug
    #codec => json
    #id => "haaaaaaaaaaaaahhhhhhhhhhh"
    }
  #file {
  #  path => "/data/a.log"
  #}
  if [type] == "beats"{
    elasticsearch {
      hosts => ["elk1", "elk2", "elk3:9200"]
      action => "index"
      index => "beats_index"
      #document_id => "%{id}"
    }
  }
  if [type] == "jdbc"{
    elasticsearch {
      hosts => ["elk1", "elk2", "elk3:9200"]
      action => "index"
      index => "mysql_index"
      document_id => "%{id}"
    }
  }
  if [type] == "redis_list"{
    elasticsearch {
      hosts => ["elk1", "elk2", "elk3:9200"]
      action => "index"
      index => "redis_index"
      document_id => "%{id}"
    }
  }
  if [type] == "redis_channel"{
    elasticsearch {
      hosts => ["elk1", "elk2", "elk3:9200"]
      action => "index"
      index => "channel_index"
      document_id => "%{id}"
    }
  }
}
